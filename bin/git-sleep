#!/usr/bin/env ruby

require 'rubygems'
require 'netrc'
require File.expand_path('../../lib/git-sleep', __FILE__)

netrc = Netrc.read(GitSleep::NETRC_PATH)

help_text = "Available commands:
    git sleep authorize
    git sleep init"

CURRENT_PATH = File.expand_path(".")
SAMPLE_FILE_NAME = "#{CURRENT_PATH}/.git/hooks/pre-commit.sample"
NON_SAMPLE_FILE_NAME = "#{CURRENT_PATH}/.git/hooks/pre-commit"

def install_hook

  path_to_hook = File.expand_path("../../hooks/pre-commit", __FILE__)
  hook_code = File.read(path_to_hook)

  File.open(SAMPLE_FILE_NAME, "w") do |f|
    f.write hook_code
  end
  successful_rename = File.rename SAMPLE_FILE_NAME, NON_SAMPLE_FILE_NAME
  if successful_rename.zero?
    puts "Successfully installed hook. Enjoy your new sense of balance."
  else
    puts "Sorry, the hook failed to install..." # will this ever happen?
  end

end


case ARGV.length
when 0
  puts help_text
when 1
  case ARGV.first.downcase.to_sym
  when :init
    
    if Dir.entries(CURRENT_PATH).include?(".git")
      puts "This is a git repo, so I'll now install the hook"
      
      if File.exists? SAMPLE_FILE_NAME
        install_hook()
      elsif File.exists? NON_SAMPLE_FILE_NAME
        puts "You already have a pre-commit hook and we don't want to overwrite it..."
        print "Is it okay? [y/n] "
        ok = $stdin.gets.chomp
        install_hook() if ok == "y"
      else
        # the file just doesn't exist
        # this probably won't work because it won't be executable...?
        install_hook()
      end
    else
      puts "This is not a git repo!"
    end
  when :authorize
    puts "Visit #{GitSleep::OUR_SITE} to get the necessary information"
    puts "what is your xid?"
    print "> "
    xid = $stdin.gets.chomp
    netrc.new_item_prefix = "\n# jawbone xid\n"
    netrc["gitsleep.com"] = xid, "no_password"
    netrc.save
  when :"-v"
    puts "Git Sleep v#{GitSleep::VERSION}"
  else # unrecognized command
    puts help_text
  end
else # other amounts of arguments
  puts help_text
end